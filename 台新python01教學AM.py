# 台新python01教學AM.py: Python Practices - 01AM (A-C) for 台新銀行
# Jia-Sheng Heh, 07/20/2023, revised from 台新python01A_環境與numpy.py

########## (A) 認識老師,同學與課程 (1hr) ##########
#%%##===== (A1) 認識老師 =====#####
#%%##===== (A2) 同學來上課的願望 =====#####
# 您...
# -- (1).曾學過什麼?
# -- (2).在做什麼? 需要什麼?
# -- (3).這門課想學什麼?

#%%##===== (A3) 課程內容 =====#####
##== 課程名稱: 大數據應用之初始實務演練—從企業數據開始 (python版)	
##== 課程目標: 
#    -- 1. 以實際上網操作，讓學員了解大數據之應用發展趨勢及實際應用型式	
#    --	2. 以若干個實務演練，由淺入深，使學員體會大數據分析實務操作之重點	
#    --	3. 以分組實際作業，使學員能由分組實作中，學習討論企業數據分析之各種發展模式	
##== 學員需求: 對象不拘
#    --	1. 學員請攜帶電腦，並具有上網機制，並先灌好Anaconda	
#    --	2. 學員請事先以2-4人一組，屆時可分組進行分析專題	
#    -- 3. 能夠的話，請學員事先準備欲分析的數據 (如果沒有，講師也有準備練習數據)	
##== 授課方式: 講師講授、小組討論、實務操作、講師回饋	
##== 總時數:	   2天 (14hr)	
##== 課程大綱: (如下)
 
#%%####### (B) AI 實務平台: Anaconda 中的 Python (1hr) ##########
#%%##===== (B1) Anaconda =====#####
# 免費開源的Python和R語言的發行版本, 由Anaconda公司開發, 最早在2012年發行
# 用於數據科學、機器學習、大數據分析等等，有超過1400個數據科學軟件包
# 適用於Windows、Linux和MacOS
#==> 至官網下載最新版本的Anaconda: https://www.anaconda.com/products/individual
#==> 依順序進行＂下一步＂執行安裝，＂同意＂相關使用條款，即可＂安裝＂。
#==> 先不用安裝"Anaconda Cloud"，安裝後會在＂開始＂選單中看到 Anaconda3, 其中有:
#    Anaconda Navigator: Anaconda的圖形化介面
#    Spyder: 撰寫python用
#    Anaconda Powershell Prompt: 安裝軟件包(pip install 軟件包)時, 或執行相關指令時使用
#    ...

#%%##===== (B2) Spyder =====#####
# (1).程式編輯區: 即在左方的本區，開發者撰寫程式的地方
#     -- 可同時撰寫多個程式檔
#     -- 修改過的檔案，檔名後會加星號(*)，存檔後星號(*)會消失
#     -- 執行整個程式，可以上方三角形鍵(Run file,F5)
#     -- 註解/反註解(comment/uncomment): Ctrl-1
z = [ 1, 2, "test"];   print(len(z));   print(z)      #-- 右下角執行結果: 3   [1, 2, 'test']
      ##== list 是 python 的内建數據類型，其中的數據可包括文字或數字, len()得到list的長度
# (2).執行介面(IPython Console): 在右下角的程式執行區
#     -- 執行中，可按其右上角紅色方塊停止執行
#     -- 互動執行: 若編輯區中的程式以 #%% 起始，可產生程式區塊
#                  可以 Ctrl-Enter執行本區塊, 
#                  或 Shift-Enter 執行本區塊 再跳到下一區塊(故可連續執行)
# (3).變量(Variable Explorer)與繪圖區(Plots): 在右上角

#%%##===== (B3) 基本程式練習: 用來觀察Spyder的各個區域 =====#####
import matplotlib.pyplot as plt              #-- 大多數軟件包,Anaconda都已準備好 
import math                                  #-- 若未準備好，要另在系統中開 "Powershell終端機" 來安裝
x = [ *range(10) ];               print(x)   #-- [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
y = [ math.sin(a) for a in x ];   print(y)   #-- 可以在右上角的變量區(Variable Explorer)看到x,y的印出
#-- [0.0, 0.8414709848078965, 0.9092974268256817, 0.1411200080598672, -0.7568024953079282, -0.9589242746631385, -0.27941549819892586, 0.6569865987187891, 0.9893582466233818, 0.4121184852417566]
plt.plot(y)                                  #-- 可以在右上角繪圖區(Plots)看到圖形/繪圖區看到圖形

#%%##===== [實作1] 請同學安裝好Anaconda, 並打開Spyder進行上述練習 =====#####


########## (C) Spyder環境與文數字數據: np (1hr) ##########
#%%##===== (C1).設定工作目錄 =====#####
#==> 任何數據分析編程的第一件事：設定工作目錄(Working Directory)
import os   
wkDir = "c:/Users/Admin/Desktop/台新python/";   os.chdir(wkDir)
print(os.getcwd())

a = [1,2,3]
b = [4,5,6]

def cook(p1,p2,p3):
    print(p1,p2,p3)


#%%##===== (C2).python 程式 注意事項 =====#####
##== (1)井字號# 代表註解(comment): 其後的指令(敘述)不執行，可分為檔首註解，段落註解，行尾註解
#     -- 編程檔 (.py) 的註解：有三種--
#        -- (A) 檔首註解：註明整個程式的 (1)程式名稱、(2)程式目的、(*)調用方式、(3)作者，(4)日期
#        -- (B) 分段註解：指示數據分析的步驟(請參考數據分析步驟說明) ，(#%%)可有段落區塊
#        -- (C) 行尾註解：在適當的地方，註解此行說明，或 執行結果 (通常 加 #-- 識別)
#     --> 可以 Ctrl-1 註解(Comment)/反註解(Ucomment) 某些段落

##== (2).一行中可以有多個指令，以分號;分隔，如: 
X = 3+2;    print(X)   #-- 5  
Y = X+5;    print(Y)   #-- 10

##== (3).在python中，大小寫是不同的，試輸入 x 與 X，觀察他們的值:
print(y)   
# [ 0.          0.52631579  1.05263158  1.57894737  2.10526316  2.63157895
#   3.15789474  3.68421053  4.21052632  4.73684211  5.26315789  5.78947368
#   6.31578947  6.84210526  7.36842105  7.89473684  8.42105263  8.94736842
#   9.47368421 10.        ]
print(X)   #-- [1]  5

##== (4).用Google協助編程(programming):
#     -- (A).尋找資源: 下關鍵字, 逐漸縮小搜尋範圍: (stackoverflow 是一個 幫助編程的 好用網站)
#             如: python plotly line chart color stackoverflow --> 以python語言, 用plotly繪折線圖(line chart), 如何著色(color)
#     -- (B).協助偵錯: 關鍵字中,加入錯誤信息, 如: url, error or ResponseError(cause)
#             如: python response url, error or ResponseError(cause)

#%%##===== (C3) 從 list 到 一維陣列(array) ##########
import numpy as np      #-- 如果此軟件包尚未安裝, 要在 Powershell終端機執行 pip install numpy
##== (1) 以 np.array() 創建陣列
A1 = np.array([2,3,"test",5,6,7]);      print("A1 =",A1);    print("A1.dtype=",A1.dtype)
   #-- A1 = ['2' '3' 'test' '5' '6' '7'] --> 全部轉為 字元格式
   #-- A1.dtype= <U11                    --> <U11 < Little Endian, U Unicode, 11 11 characters
   
z = (1,2,'test')
print('z original =', z)
A1 = np.array(z)
print('A1 new arrry =', A1)
# numpy 的方法 array 可以建立一個一維陣列，我們傳入參數是一個 list，傳入的這個 list 有混和不同的形態，numpy.array() 會將這個 list 都轉成單一資料型態，也就是都轉成字串

A1 = np.array([2,3,"test",5,6,7]);
# A1 = ['2' '3' 'test' '5' '6' '7']

   
##== (2) 陣列的形狀 <---> 串列 len(x)
print("A1.ndim=",A1.ndim)   #-- 維度數目/階數 --> A1.ndim= 1
print("A1.shape=",A1.shape) #-- 各維個數      --> A1.shape= (6,)
print("A1.size=",A1.size)   #-- 總個數        --> A1.size= 6
##== (3) 一維陣列元素
print("A1[2]=",A1[2])          #-- 第三個元素，因為第一個元素index是0   --> A1[2] = test
print("A1[2:5]=",A1[2:5])      #-- 第3-5個元素 (不含最後5 -- 第6個元素) --> A1[2:5] = ['test' '5' '6']
print("A1[:6:2]=",A1[:6:2])    #-- 第 0/2/4 個元素，步數為 2，不含最後一個第6個元素(216) --> A1[:6:2] = ['2' 'test' '6']
print("A1[::-1]=",A1[::-1])    #-- 逆向排列                            --> A1[::-1]= ['7' '6' '5' 'test' '3' '2']

#%%##===== (C4) 從 一維陣列 到 二維陣列(array) ##########
##== (1) 二維陣列
A2 = np.array([(1.5,2,3), (4,5,6), (7,8,9), (10,11,12)]);    print("A2 =",A2);    print("A2.dtype=",A2.dtype)
   #-- A2 = [[ 1.5  2.  3. ]  
   #         [ 4.   5.  6. ] 
   #         [ 7.   8.  9. ] 
   #         [10.  11. 12. ]]     A2.dtype= float64
##== (2) 陣列的形狀 (注意其不同點)
print("A2.ndim=",A2.ndim)   #-- 維度數目/階數 --> A2.ndim= 2
print("A2.shape=",A2.shape) #-- 各維個數      --> A2.shape= (4, 3)
print("A2.size=",A2.size)   #-- 總個數        --> A2.size= 12
##== (3) 二陣列元素
print("A2[2,3]=",A2[2,2])      #-- 單一元素，第[2,2]元素 (第3列第3行個元素) --> A2[2,2]= 9.0
print("A2[0:3,1]=",A2[0:3,1])  #-- 一行元素，第2行的0-3元素                --> A2[0:3,1]= [2. 5. 8.]
print("A2[:,1]=",A2[:,1])      #-- 一行的全部元素，第1行的全部元素          --> A2[:,1]= [ 2. 5. 8. 11.]
print("A2[1:3,:]=",A2[1:3,:])  #-- 列元素，第1:3的兩列(1,2,不含3)的全部元素 --> A2[1:3,:]= [[4. 5. 6.]
#                                                                                         [7. 8. 9.]]
##== (4) 軸向加總運算(array with axis parameters)
print("A2.sum(axis=0)=",A2.sum(axis=0))        #-- 加總 成 axis=0 (列)     --> A2.sum(axis=0)= [22.5 26.  30. ]
print("A2.min(axis=1)=",A2.min(axis=1))        #-- 取最大值 成 axis=1 (行) --> A2.min(axis=1)= [ 1.5  4.  7. 10. ]
print("A2.cumsum(axis=1)=",A2.cumsum(axis=1))  #-- 累加 成 axis=1 (行)     
#--> A2.cumsum(axis=1)= [[ 1.5  3.5  6.5]
#                        [ 4.   9.  15. ]
#                        [ 7.  15.  24. ]
#                        [10.  21.  33. ]]

#%%##===== [實作2] 請修改(C1)的目錄名稱為，你儲存本程式(台新python 01教學AM.py)的目錄 =====#####

